diff --git a/Makefile b/Makefile
index 62fd0f8..078a709 100644
--- a/Makefile
+++ b/Makefile
@@ -139,6 +139,11 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_clear\
+	$U/_print_uid\
+	$U/_set_uid\
+	$U/_trace\
+	$U/_load\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
diff --git a/kernel/defs.h b/kernel/defs.h
index d1b6bb9..f3c8fac 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -8,6 +8,7 @@ struct spinlock;
 struct sleeplock;
 struct stat;
 struct superblock;
+struct procInfo;
 
 // bio.c
 void            binit(void);
@@ -106,6 +107,10 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+int             getuid(void);
+int             setuid(int);
+int             trace(int);
+int             info(struct procInfo*);
 
 // swtch.S
 void            swtch(struct context*, struct context*);
@@ -140,6 +145,11 @@ void            argaddr(int, uint64 *);
 int             fetchstr(uint64, char*, int);
 int             fetchaddr(uint64, uint64*);
 void            syscall();
+int             is_trace_enabled();
+void            print_argint(int);
+void            print_argstr(int);
+void            print_argaddr(int);
+void            print_args(int);
 
 // trap.c
 extern uint     ticks;
diff --git a/kernel/proc.c b/kernel/proc.c
index 58a8a0b..3869cfd 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -169,6 +169,7 @@ freeproc(struct proc *p)
   p->killed = 0;
   p->xstate = 0;
   p->state = UNUSED;
+  p->traced_syscall_number = 0;
 }
 
 // Create a user page table for a given process, with no user memory,
@@ -686,3 +687,54 @@ procdump(void)
     printf("\n");
   }
 }
+
+// define a global variable for user id
+int uid = 123;
+// getter for user id int
+int
+getuid(void)
+{
+  return uid;
+}
+
+int
+setuid(int _uid)
+{
+  uid = _uid;
+  return 0;
+}
+
+int 
+trace(int syscall_number)
+{
+  struct proc *p = myproc();
+  p->traced_syscall_number = syscall_number;
+  return 0;
+}
+
+int
+info(struct procInfo *user_procinfo)
+{
+  struct procInfo kernel_procinfo;
+  struct proc *p;
+  int total_mem = 0;
+  int active_proc = 0;
+  
+  // Initialize totalMemSize to the available memory: PHYSTOP - KERNBASE
+  kernel_procinfo.totalMemSize = PHYSTOP - KERNBASE;
+  
+  for(p = proc; p < &proc[NPROC]; p++) {
+    acquire(&p->lock);
+    if (p->state == RUNNING || p->state == RUNNABLE) {
+      active_proc++;
+      total_mem += p->sz;
+    }
+    release(&p->lock);
+  }
+  kernel_procinfo.activeProcess = active_proc;
+  kernel_procinfo.totalProcess = NPROC;
+  kernel_procinfo.memsize = total_mem;
+  if (copyout(myproc()->pagetable, (uint64)user_procinfo, (char *)&kernel_procinfo, sizeof(kernel_procinfo)) < 0)
+    return -1;
+  return 0;
+}
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..14395ea 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -104,4 +104,5 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  int traced_syscall_number;   // Trace syscall by number
 };
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..21bbfc1 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -59,6 +59,15 @@ argint(int n, int *ip)
   *ip = argraw(n);
 }
 
+// print the nth 32-bit system call argument.
+void
+print_argint(int n)
+{
+  int int_arg;
+  argint(n, &int_arg);
+  printf("%d", int_arg);
+}
+
 // Retrieve an argument as a pointer.
 // Doesn't check for legality, since
 // copyin/copyout will do that.
@@ -68,6 +77,27 @@ argaddr(int n, uint64 *ip)
   *ip = argraw(n);
 }
 
+// Print the argument as a pointer.
+void
+print_argaddr(int n)
+{
+  uint64 addr_arg;
+  argaddr(n, &addr_arg);
+  char hex_digits[] = "0123456789abcdef";
+  char buffer[17]; // Buffer to store the hex representation, 16 hex digits + '\0'
+  
+  buffer[16] = '\0';  // Null-terminate the string
+
+  // Fill the buffer with the hexadecimal representation, starting from the least significant digit
+  for (int i = 15; i >= 0; i--) {
+      buffer[i] = hex_digits[addr_arg & 0xF]; // Get the last 4 bits (one hex digit)
+      addr_arg >>= 4;  // Shift the address by 4 bits to the right (i.e., divide by 16)
+  }
+
+  // Print the result with the '0x' prefix
+  printf("0x%s", buffer);
+}
+
 // Fetch the nth word-sized system call argument as a null-terminated string.
 // Copies into buf, at most max.
 // Returns string length if OK (including nul), -1 if error.
@@ -79,6 +109,15 @@ argstr(int n, char *buf, int max)
   return fetchstr(addr, buf, max);
 }
 
+// Print the string
+void
+print_argstr(int n)
+{
+  char str_arg[MAXPATH];
+  argstr(n, str_arg, MAXPATH);
+  printf("%s", str_arg);
+}
+
 // Prototypes for the functions that handle system calls.
 extern uint64 sys_fork(void);
 extern uint64 sys_exit(void);
@@ -101,6 +140,10 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_getuid(void);
+extern uint64 sys_setuid(void);
+extern uint64 sys_trace(void);
+extern uint64 sys_info(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +169,39 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_getuid]  sys_getuid,
+[SYS_setuid]  sys_setuid,
+[SYS_trace]   sys_trace,
+[SYS_info]    sys_info,
+};
+
+// Array mapping syscall numbers to their names
+const char *syscall_names[] = {
+[SYS_fork]   = "fork",
+[SYS_exit]   = "exit",
+[SYS_wait]   = "wait",
+[SYS_pipe]   = "pipe",
+[SYS_read]   = "read",
+[SYS_kill]   = "kill",
+[SYS_exec]   = "exec",
+[SYS_fstat]  = "fstat",
+[SYS_chdir]  = "chdir",
+[SYS_dup]    = "dup",
+[SYS_getpid] = "getpid",
+[SYS_sbrk]   = "sbrk",
+[SYS_sleep]  = "sleep",
+[SYS_uptime] = "uptime",
+[SYS_open]   = "open",
+[SYS_write]  = "write",
+[SYS_mknod]  = "mknod",
+[SYS_unlink] = "unlink",
+[SYS_link]   = "link",
+[SYS_mkdir]  = "mkdir",
+[SYS_close]  = "close",
+[SYS_getuid] = "getuid",
+[SYS_setuid] = "setuid",
+[SYS_trace]  = "trace",
+[SYS_info]   = "info",
 };
 
 void
@@ -138,10 +214,102 @@ syscall(void)
   if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
     // Use num to lookup the system call function for num, call it,
     // and store its return value in p->trapframe->a0
+
+    // trace log
+    int _is_trace_enabled = is_trace_enabled();
+    if(_is_trace_enabled) {
+      acquire(&p->lock); // lock needed for pid
+      printf("pid %d, syscall: %s, args: (", p->pid, syscall_names[num]);
+      print_args(num);
+      release(&p->lock);
+    }
+
     p->trapframe->a0 = syscalls[num]();
+    
+    // trace log
+    if(_is_trace_enabled) {
+      printf("), return: %lu\n", p->trapframe->a0);
+    } 
   } else {
     printf("%d %s: unknown sys call %d\n",
             p->pid, p->name, num);
     p->trapframe->a0 = -1;
   }
 }
+
+int
+is_trace_enabled()
+{
+  struct proc *p = myproc();
+  if(p->trapframe->a7 == p->traced_syscall_number)
+    return 1;
+  return 0;
+}
+
+void
+print_args(int syscall_num)
+{
+    switch (syscall_num)
+    {
+      case SYS_exit:
+          print_argint(0);  // Exit status
+          break;
+      case SYS_wait:
+          print_argaddr(0); // Pointer to store exit status
+          break;
+      case SYS_pipe:
+      case SYS_info:
+          print_argaddr(0); // Pipe file descriptors
+          break;
+      case SYS_read:
+      case SYS_write:
+          print_argint(0);  // File descriptor
+          printf(", ");
+          print_argaddr(1); // Buffer address
+          printf(", ");
+          print_argint(2);  // Number of bytes
+          break;
+      case SYS_close:
+      case SYS_kill:
+      case SYS_dup:
+      case SYS_sbrk:
+      case SYS_sleep:
+      case SYS_setuid:
+      case SYS_trace:
+          print_argint(0);  // File descriptor / process ID / size / seconds / user ID / syscall number
+          break;
+      case SYS_exec:
+          print_argstr(0);  // Command to execute
+          printf(", ");
+          print_argaddr(1); // Arguments address
+          break;
+      case SYS_open:
+          print_argstr(0);  // Filename
+          printf(", ");
+          print_argint(1);  // Flags
+          break;
+      case SYS_mknod:
+          print_argint(0);  // Device number
+          printf(", ");
+          print_argint(1);  // File type
+          break;
+      case SYS_unlink:
+      case SYS_mkdir:
+      case SYS_chdir:
+          print_argstr(0);  // Path
+          break;
+      case SYS_fstat:
+          print_argint(0);  // File descriptor
+          printf(", ");
+          print_argaddr(1); // Stat structure address
+          break;
+      case SYS_link:
+          print_argstr(0);  // Old path
+          printf(", ");
+          print_argstr(1);  // New path
+          break;
+      default:
+          // Unhandled syscall, do nothing
+          break;
+    }
+}
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..dae33a2 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,7 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_getuid 22
+#define SYS_setuid 23
+#define SYS_trace  24
+#define SYS_info   25
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 3b4d5bd..b8f3eff 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -91,3 +91,35 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+// return user id
+uint64
+sys_getuid(void)
+{
+  return getuid();
+}
+
+// return status
+uint64
+sys_setuid(void)
+{
+  int uid;
+  argint(0, &uid);
+  return setuid(uid);
+}
+
+uint64
+sys_trace(void)
+{
+  int syscall_num;
+  argint(0, &syscall_num);
+  return trace(syscall_num);
+}
+
+uint64
+sys_info(void)
+{
+  struct procInfo *user_procinfo;
+  argaddr(0, (uint64 *)&user_procinfo);
+  return info(user_procinfo);
+}
diff --git a/kernel/types.h b/kernel/types.h
index ee73164..c435fee 100644
--- a/kernel/types.h
+++ b/kernel/types.h
@@ -8,3 +8,10 @@ typedef unsigned int  uint32;
 typedef unsigned long uint64;
 
 typedef uint64 pde_t;
+
+typedef struct procInfo { 
+  int activeProcess; // # of processes in RUNNABLE and RUNNING state
+  int totalProcess; // # of total possible processes
+  int memsize; // in bytes; summation of all active process 
+  int totalMemSize; // in bytes; all available physical Memory
+} procInfo;
\ No newline at end of file
diff --git a/user/clear.c b/user/clear.c
new file mode 100644
index 0000000..779740f
--- /dev/null
+++ b/user/clear.c
@@ -0,0 +1,7 @@
+#include "kernel/types.h"
+#include "user/user.h"
+
+int main() {
+	printf("\033[2J\033[H");
+	exit(0);
+}
\ No newline at end of file
diff --git a/user/load.c b/user/load.c
new file mode 100644
index 0000000..c6d347a
--- /dev/null
+++ b/user/load.c
@@ -0,0 +1,157 @@
+#ifndef CHILD_SLEEP_TIME
+#define CHILD_SLEEP_TIME 600
+#endif
+#ifndef CONSOLE_SLEEP
+#define CONSOLE_SLEEP 8
+#endif
+
+#include "kernel/types.h"
+#include "kernel/fcntl.h"
+#include "user/user.h"
+
+int is_valid_number(const char *str) {
+    if (str == 0 || *str == '\0') {
+        return 0;
+    }
+    for (int i = 0; str[i] != '\0'; i++) {
+        if (str[i] < '0' || str[i] > '9') {
+            return 0;
+        }
+    }
+    return 1;
+}
+
+int* create_children(int child_count, int allocation_amount, int pipe_fd[2]) {
+    int *child_pids = (int *)malloc(child_count * sizeof(int));
+    if (child_pids == 0) {
+        printf("Failed to allocate memory for child pids.\n");
+        exit(1);
+    }
+    printf("Parent going to sleep.\n");
+    for (int i = 0; i < child_count; i++) {
+        int pid = fork();
+        sleep(CONSOLE_SLEEP); // For clean console output
+        if (pid < 0) {
+            // Fork failed
+            printf("Fork failed\n");
+        } 
+        else if (pid == 0) {
+            // Child process
+            close(pipe_fd[0]); // Close read end of the pipe in the child
+            printf("Child is created.\n");
+            void *allocated_memory = malloc(allocation_amount);
+            if (allocated_memory == 0) {
+                printf("Child failed to allocate %d bytes.\n", allocation_amount);
+            } else {
+                printf("Child allocated %d bytes.\n", allocation_amount);
+            }
+            write(pipe_fd[1], "1", 1);
+            close(pipe_fd[1]);
+            printf("Child going to sleep.\n");
+            sleep(CHILD_SLEEP_TIME); // child sleeping
+            // while(1); // child running
+            printf("Child waking up.\n");
+        } else {
+            child_pids[i] = pid;
+        }
+    }
+    return child_pids;
+}
+
+void wait_for_children(int child_count, int pipe_fd[2]) {
+    // Parent waits for all children to allocate memory
+    sleep(1);
+    close(pipe_fd[1]); // Close write end of the pipe in the parent
+    char buffer[1];
+    int i = 0;
+    for (i = 0; i < child_count; i++) {
+        while(buffer[0] != '1') read(pipe_fd[0], buffer, 1); // Wait for a message from each child
+        buffer[0] = '\0';
+    }
+    close(pipe_fd[0]); // Close read end after receiving all confirmations
+    printf("Parent wake up.\n");
+}
+
+// Helper function to print the integer and fractional part of a memory size
+void print_memory_size(int whole_part, int decimal_part, int decimal_precision) {
+    printf("%d.", whole_part);
+    int divisor = 1;
+    for (int i = 0; i < decimal_precision - 1; i++) {
+        divisor *= 10;
+    }
+    int temp = decimal_part;
+    while (divisor > 1 && temp < divisor) {
+        printf("0");
+        divisor /= 10;
+    }
+    printf("%d", decimal_part);
+}
+
+void display_sys_info() {
+    // Allocate memory for the struct procInfo in user space
+    struct procInfo* user_procinfo = (struct procInfo *)malloc(sizeof(struct procInfo));
+    // Call the 'info' system call to get the process information
+    if (info(user_procinfo) < 0) {
+        printf("Failed to get system info.\n");
+        free(user_procinfo);
+        return;
+    }
+    int active_process_memsize_in_kb = user_procinfo->memsize >> 10;
+    int total_memsize_in_mb = user_procinfo->totalMemSize >> 20;
+    // Calculate decimal places for active process memory (for 2 decimal places)
+    int whole_part = active_process_memsize_in_kb >> 10;
+    int decimal_part = ((active_process_memsize_in_kb % 1024) * 10000) >> 10; // Scale to get 4 decimal places
+    // Print the system information
+    printf("Current system information:\n");
+    printf("Processes: %d/%d\n", user_procinfo->activeProcess, user_procinfo->totalProcess);
+    printf("RAM: ");
+    print_memory_size(whole_part, decimal_part, 4);
+    printf("/%d (in MB)\n", total_memsize_in_mb);
+    // printf("RAM: %d/%d (in B)\n", user_procinfo->memsize, user_procinfo->totalMemSize);
+    // Free the dynamically allocated memory after use
+    free(user_procinfo);
+}
+
+void kill_children(int* child_pids, int child_count) {
+    for (int i = 0; i < child_count; i++) {
+        if (kill(child_pids[i]) < 0) {
+            printf("Failed to kill child with pid %d\n", child_pids[i]);
+        } 
+        // else {
+        //     printf("Killed child with pid %d\n", child_pids[i]);
+        // }
+    }
+}
+
+void input_validation(int argc, char* argv[]) {
+    if (argc != 3) {
+        fprintf(2, "Usage: load <child_count> <allocation_amount>\n");
+        exit(1);
+    }
+    if (!is_valid_number(argv[1])) {
+        fprintf(2, "Error: Invalid child_count '%s'.\n", argv[1]);
+        exit(1);
+    }
+    if (!is_valid_number(argv[2])) {
+        fprintf(2, "Error: Invalid allocation_amount '%s'.\n", argv[2]);
+        exit(1);
+    }
+}
+
+int main(int argc, char *argv[]) {
+    input_validation(argc, argv);
+    int child_count = atoi(argv[1]);
+    int allocation_amount = atoi(argv[2]);
+    // Create a pipe for communication between parent and children
+    int pipe_fd[2];
+    if (pipe(pipe_fd) < 0) {
+        printf("Pipe creation failed\n");
+        exit(1);
+    }
+    int* child_pids = create_children(child_count, allocation_amount, pipe_fd);
+    wait_for_children(child_count, pipe_fd);
+    display_sys_info();
+    kill_children(child_pids, child_count);
+    free(child_pids);
+    return 0;
+}
diff --git a/user/print_uid.c b/user/print_uid.c
new file mode 100644
index 0000000..063e773
--- /dev/null
+++ b/user/print_uid.c
@@ -0,0 +1,11 @@
+#include "kernel/types.h" 
+#include "kernel/stat.h" 
+#include "user/user.h"
+int main()
+{
+	int uid = getuid();
+	
+	printf("%d\n", uid);
+	
+	return 0;
+}
\ No newline at end of file
diff --git a/user/set_uid.c b/user/set_uid.c
new file mode 100644
index 0000000..eb3cf1a
--- /dev/null
+++ b/user/set_uid.c
@@ -0,0 +1,11 @@
+#include "kernel/types.h"
+#include "user/user.h"
+int main()
+{
+	char *uid_buffer; 
+	uid_buffer = malloc(10);
+	gets(uid_buffer, 9);
+	int uid = atoi(uid_buffer);
+	setuid(uid);
+	return 0;
+}
\ No newline at end of file
diff --git a/user/trace.c b/user/trace.c
new file mode 100644
index 0000000..0795cf7
--- /dev/null
+++ b/user/trace.c
@@ -0,0 +1,41 @@
+#include "kernel/types.h"
+#include "user/user.h"
+#include "kernel/fcntl.h"
+
+int is_valid_number(const char *str) {
+    if (str == 0 || *str == '\0') {
+        return 0;
+    }
+    for (int i = 0; str[i] != '\0'; i++) {
+        if (str[i] < '0' || str[i] > '9') {
+            return 0;
+        }
+    }
+    return 1;
+}
+
+int main(int argc, char *argv[]) {
+    if (argc < 3) {
+        fprintf(2, "Usage: trace <sys_call_number> <command> [<args>...]\n");
+        exit(1);
+    }
+
+    if (!is_valid_number(argv[1])) {
+        fprintf(2, "Error: Invalid system call number '%s'.\n", argv[1]);
+        exit(1);
+    }
+
+    int syscall_number = atoi(argv[1]);
+
+    if (trace(syscall_number) < 0) {
+        fprintf(2, "Error: Failed to trace system call number: %d\n", syscall_number);
+        exit(1);
+    }
+
+    if (exec(argv[2], &argv[2]) < 0) {
+        fprintf(2, "Error: Exec failed for command '%s'\n", argv[2]);
+        exit(1);
+    }
+
+    exit(1);
+}
diff --git a/user/user.h b/user/user.h
index 04013ca..a7dfb2f 100644
--- a/user/user.h
+++ b/user/user.h
@@ -1,4 +1,5 @@
 struct stat;
+struct procInfo;
 
 // system calls
 int fork(void);
@@ -22,6 +23,10 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int getuid(void);
+int setuid(int);
+int trace(int);
+int info(struct procInfo*);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..78543fd 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,7 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("getuid");
+entry("setuid");
+entry("trace");
+entry("info");
