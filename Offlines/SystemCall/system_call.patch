diff --git a/Makefile b/Makefile
index 62fd0f8..6a25e1b 100644
--- a/Makefile
+++ b/Makefile
@@ -139,6 +139,9 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_clear\
+	$U/_print_uid\
+	$U/_set_uid
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
diff --git a/kernel/defs.h b/kernel/defs.h
index d1b6bb9..bcc1483 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -106,6 +106,8 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+int             getuid(void);
+int             setuid(int);
 
 // swtch.S
 void            swtch(struct context*, struct context*);
diff --git a/kernel/proc.c b/kernel/proc.c
index 58a8a0b..668abf8 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -686,3 +686,19 @@ procdump(void)
     printf("\n");
   }
 }
+
+// define a global variable for user id
+int uid = 123;
+// getter for user id int
+int
+getuid(void)
+{
+  return uid;
+}
+
+int
+setuid(int _uid)
+{
+  uid = _uid;
+  return 0;
+}
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..1e74e64 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,8 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_getuid(void);
+extern uint64 sys_setuid(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +128,8 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_getuid]  sys_getuid,
+[SYS_setuid]  sys_setuid,
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..72b76f0 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,5 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_getuid 22
+#define SYS_setuid 23
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 3b4d5bd..365e9a0 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -91,3 +91,19 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+// return user id
+uint64
+sys_getuid(void)
+{
+  return getuid();
+}
+
+// return status
+uint64
+sys_setuid(void)
+{
+  int uid;
+  argint(0, &uid);
+  return setuid(uid);
+}
diff --git a/user/clear.c b/user/clear.c
new file mode 100644
index 0000000..779740f
--- /dev/null
+++ b/user/clear.c
@@ -0,0 +1,7 @@
+#include "kernel/types.h"
+#include "user/user.h"
+
+int main() {
+	printf("\033[2J\033[H");
+	exit(0);
+}
\ No newline at end of file
diff --git a/user/print_uid.c b/user/print_uid.c
new file mode 100644
index 0000000..063e773
--- /dev/null
+++ b/user/print_uid.c
@@ -0,0 +1,11 @@
+#include "kernel/types.h" 
+#include "kernel/stat.h" 
+#include "user/user.h"
+int main()
+{
+	int uid = getuid();
+	
+	printf("%d\n", uid);
+	
+	return 0;
+}
\ No newline at end of file
diff --git a/user/set_uid.c b/user/set_uid.c
new file mode 100644
index 0000000..eb3cf1a
--- /dev/null
+++ b/user/set_uid.c
@@ -0,0 +1,11 @@
+#include "kernel/types.h"
+#include "user/user.h"
+int main()
+{
+	char *uid_buffer; 
+	uid_buffer = malloc(10);
+	gets(uid_buffer, 9);
+	int uid = atoi(uid_buffer);
+	setuid(uid);
+	return 0;
+}
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index 04013ca..8749155 100644
--- a/user/user.h
+++ b/user/user.h
@@ -22,6 +22,8 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int getuid(void);
+int setuid(int);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..680f683 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,5 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("getuid");
+entry("setuid");
