diff --git a/Makefile b/Makefile
index 62fd0f8..c3c9e14 100644
--- a/Makefile
+++ b/Makefile
@@ -28,7 +28,8 @@ OBJS = \
   $K/sysfile.o \
   $K/kernelvec.o \
   $K/plic.o \
-  $K/virtio_disk.o
+  $K/virtio_disk.o \
+  $K/mlfq.o \
 
 # riscv64-unknown-elf- or riscv64-linux-gnu-
 # perhaps in /opt/riscv/bin
@@ -56,7 +57,7 @@ LD = $(TOOLPREFIX)ld
 OBJCOPY = $(TOOLPREFIX)objcopy
 OBJDUMP = $(TOOLPREFIX)objdump
 
-CFLAGS = -Wall -Werror -O -fno-omit-frame-pointer -ggdb -gdwarf-2
+CFLAGS = -Wall -Werror -Og -fno-omit-frame-pointer -ggdb -gdwarf-2 -g3
 CFLAGS += -MD
 CFLAGS += -mcmodel=medany
 # CFLAGS += -ffreestanding -fno-common -nostdlib -mno-relax
@@ -139,6 +140,10 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_clear\
+	$U/_quit\
+	$U/_seed\
+	$U/_next\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
@@ -160,7 +165,7 @@ QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \
 	then echo "-gdb tcp::$(GDBPORT)"; \
 	else echo "-s -p $(GDBPORT)"; fi)
 ifndef CPUS
-CPUS := 3
+CPUS := 1
 endif
 
 QEMUOPTS = -machine virt -bios none -kernel $K/kernel -m 128M -smp $(CPUS) -nographic
diff --git a/kernel/defs.h b/kernel/defs.h
index d1b6bb9..50001cd 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -8,6 +8,10 @@ struct spinlock;
 struct sleeplock;
 struct stat;
 struct superblock;
+struct queue;
+
+// start.c
+void            timerstop(void);
 
 // bio.c
 void            binit(void);
@@ -77,7 +81,7 @@ int             piperead(struct pipe*, uint64, int);
 int             pipewrite(struct pipe*, uint64, int);
 
 // printf.c
-int            printf(char*, ...) __attribute__ ((format (printf, 1, 2)));
+int             printf(char*, ...) __attribute__ ((format (printf, 1, 2)));
 void            panic(char*) __attribute__((noreturn));
 void            printfinit(void);
 
@@ -106,6 +110,8 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+void            setseed(int);
+int             randrange(int);
 
 // swtch.S
 void            swtch(struct context*, struct context*);
@@ -185,5 +191,10 @@ void            virtio_disk_init(void);
 void            virtio_disk_rw(struct buf *, int);
 void            virtio_disk_intr(void);
 
+// mlfq.c
+void            mlfqinit(void);
+void            enqueue(struct queue*, struct proc*);
+struct proc*    dequeue(struct queue*);
+
 // number of elements in fixed-size array
 #define NELEM(x) (sizeof(x)/sizeof((x)[0]))
diff --git a/kernel/kernelvec.S b/kernel/kernelvec.S
index a18ecbb..23501c4 100644
--- a/kernel/kernelvec.S
+++ b/kernel/kernelvec.S
@@ -73,12 +73,17 @@ timervec:
         # scratch[0,8,16] : register save area.
         # scratch[24] : address of CLINT's MTIMECMP register.
         # scratch[32] : desired interval between interrupts.
-        
+        # scratch[40] : stop flag set by timerstop.
+
         csrrw a0, mscratch, a0
         sd a1, 0(a0)
         sd a2, 8(a0)
         sd a3, 16(a0)
 
+        # stop if timerstop has set stop flag
+        ld a1, 40(a0)
+        bne a1, zero, halt
+
         # schedule the next timer interrupt
         # by adding interval to mtimecmp.
         ld a1, 24(a0) # CLINT_MTIMECMP(hart)
@@ -98,3 +103,13 @@ timervec:
         csrrw a0, mscratch, a0
 
         mret
+
+halt:
+        # qemu stops if FINISHER_PASS=0x5555
+        # is written at address *VIRT_TEST(=0x100000L)
+        lui a1, 0x100
+        lui a2, 0x5
+        addi a2, a2, 0x555
+        sw a2, 0(a1)
+spin:
+        j spin
diff --git a/kernel/main.c b/kernel/main.c
index f0d3171..ccf8e2c 100644
--- a/kernel/main.c
+++ b/kernel/main.c
@@ -40,6 +40,6 @@ main()
     trapinithart();   // install kernel trap vector
     plicinithart();   // ask PLIC for device interrupts
   }
-
+  mlfqinit();
   scheduler();        
 }
diff --git a/kernel/mlfq.c b/kernel/mlfq.c
new file mode 100644
index 0000000..4e53adb
--- /dev/null
+++ b/kernel/mlfq.c
@@ -0,0 +1,42 @@
+//
+// Support functions for mlfq.
+//
+
+#include "types.h"
+#include "riscv.h"
+#include "defs.h"
+#include "param.h"
+#include "spinlock.h"
+#include "proc.h"
+#include "mlfq.h"
+
+struct mlfq mlfq;
+
+void 
+mlfqinit(void)
+{
+  initlock(&mlfq.lock, "mlfq");
+  mlfq.top_q.head = mlfq.top_q.tail = mlfq.bottom_q.head = mlfq.bottom_q.tail = 0;
+}
+
+void 
+enqueue(struct queue *q, struct proc *p) 
+{
+  if ((q->tail + 1) % NPROC == q->head) {
+  panic("Queue overflow");  // Check for queue overflow
+  }
+  q->procs[q->tail] = p;
+  q->tail = (q->tail + 1) % NPROC;
+}
+
+struct 
+proc* dequeue(struct queue *q) 
+{
+  if (q->head == q->tail) {
+    return 0;  // Queue is empty
+  }
+  struct proc *p = q->procs[q->head];
+  q->head = (q->head + 1) % NPROC;
+  return p;
+}
+
diff --git a/kernel/mlfq.h b/kernel/mlfq.h
new file mode 100644
index 0000000..a8970a1
--- /dev/null
+++ b/kernel/mlfq.h
@@ -0,0 +1,20 @@
+#ifndef MLFQ_H
+#define MLFQ_H
+
+#include "types.h"
+#include "proc.h"
+#include "param.h"
+#include "spinlock.h"
+
+struct queue {
+  struct proc *procs[NPROC];  // Array of process pointers
+  int head;                   // Index of the first process in the queue
+  int tail;                   // Index of the next free slot
+};
+
+struct mlfq {
+  struct queue top_q, bottom_q; // Two queues for MLFQ
+  struct spinlock lock;         // Lock to protect access to the MLFQ
+};
+
+#endif // _MLFQ_H_
diff --git a/kernel/param.h b/kernel/param.h
index 6624bff..23fd8ce 100644
--- a/kernel/param.h
+++ b/kernel/param.h
@@ -1,13 +1,17 @@
-#define NPROC        64  // maximum number of processes
-#define NCPU          8  // maximum number of CPUs
-#define NOFILE       16  // open files per process
-#define NFILE       100  // open files per system
-#define NINODE       50  // maximum number of active i-nodes
-#define NDEV         10  // maximum major device number
-#define ROOTDEV       1  // device number of file system root disk
-#define MAXARG       32  // max exec arguments
-#define MAXOPBLOCKS  10  // max # of blocks any FS op writes
-#define LOGSIZE      (MAXOPBLOCKS*3)  // max data blocks in on-disk log
-#define NBUF         (MAXOPBLOCKS*3)  // size of disk block cache
-#define FSSIZE       2000  // size of file system in blocks
-#define MAXPATH      128   // maximum file path name
+#define NPROC           64 // maximum number of processes
+#define NCPU             8 // maximum number of CPUs
+#define NOFILE          16 // open files per process
+#define NFILE          100 // open files per system
+#define NINODE          50 // maximum number of active i-nodes
+#define NDEV            10 // maximum major device number
+#define ROOTDEV          1 // device number of file system root disk
+#define MAXARG          32 // max exec arguments
+#define MAXOPBLOCKS     10 // max # of blocks any FS op writes
+#define LOGSIZE   (MAXOPBLOCKS*3) // max data blocks in on-disk log
+#define NBUF      (MAXOPBLOCKS*3) // size of disk block cache
+#define FSSIZE        2000 // size of file system in blocks
+#define MAXPATH        128 // maximum file path name
+#define TIME_LIMIT_0     2 // time limits for q0
+#define TIME_LIMIT_1     4 // time limits for q1
+#define WAIT_THRESH      6 // waiting threshold
+#define DEFAULT_TICKETS 10 // initial ticket count for lottery scheduling
diff --git a/kernel/proc.c b/kernel/proc.c
index 58a8a0b..44d0dc0 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -5,6 +5,8 @@
 #include "spinlock.h"
 #include "proc.h"
 #include "defs.h"
+#include "random.h"
+#include "mlfq.h"
 
 struct cpu cpus[NCPU];
 
@@ -26,6 +28,9 @@ extern char trampoline[]; // trampoline.S
 // must be acquired before any p->lock.
 struct spinlock wait_lock;
 
+// multilevel feedback queue for scheduling
+extern struct mlfq mlfq;
+
 // Allocate a page for each process's kernel stack.
 // Map it high in memory, followed by an invalid
 // guard page.
@@ -51,6 +56,7 @@ procinit(void)
   
   initlock(&pid_lock, "nextpid");
   initlock(&wait_lock, "wait_lock");
+  initlock(&seed_lock, "seed_lock");
   for(p = proc; p < &proc[NPROC]; p++) {
       initlock(&p->lock, "proc");
       p->state = UNUSED;
@@ -686,3 +692,22 @@ procdump(void)
     printf("\n");
   }
 }
+
+void
+setseed(int userseed)
+{
+  acquire(&seed_lock);
+  seed = userseed;
+  release(&seed_lock);
+}
+
+int
+randrange(int upper_limit)
+{
+  int random;
+  acquire(&seed_lock);
+  seed = (A * seed + C) % M;
+  random = seed % upper_limit + 1;
+  release(&seed_lock);
+  return random;
+}
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..17774a6 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -1,3 +1,6 @@
+#ifndef PROC_H
+#define PROC_H
+
 // Saved registers for kernel context switches.
 struct context {
   uint64 ra;
@@ -105,3 +108,5 @@ struct proc {
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
 };
+
+#endif // _PROC_H_
diff --git a/kernel/pstat.h b/kernel/pstat.h
new file mode 100644
index 0000000..d9ea295
--- /dev/null
+++ b/kernel/pstat.h
@@ -0,0 +1,17 @@
+#ifndef _PSTAT_H_
+#define _PSTAT_H_
+#include "param.h"
+
+struct pstat {
+  int pid[NPROC];              // the process ID of each process 
+  int inuse[NPROC];            // whether this slot of the process table is being used (1 or 0)
+  int inQ[NPROC];              // which queue the process is currently in
+  int waiting_time[NPROC];     // the time each process has spent waiting before being scheduled
+  int running_time[NPROC];     // Number of times the process was scheduled before its time slice was used
+  int times_scheduled[NPROC];  // the total number of times this process was scheduled
+  int tickets_original[NPROC]; // the number of tickets each process originally had
+  int tickets_current[NPROC];  // the number of tickets each process currently has
+  int queue_ticks[NPROC][2];  // the total number of ticks each process has spent in each queue
+};
+
+#endif // _PSTAT_H_
diff --git a/kernel/random.h b/kernel/random.h
new file mode 100644
index 0000000..32829ba
--- /dev/null
+++ b/kernel/random.h
@@ -0,0 +1,13 @@
+#ifndef RANDOM_H
+#define RANDOM_H
+
+#define A 14359
+#define C 9654
+#define M 21569
+
+#include "spinlock.h"
+
+int seed = 1337;
+struct spinlock seed_lock;
+
+#endif // _RANDOM_H_
diff --git a/kernel/spinlock.h b/kernel/spinlock.h
index 4392820..b56eaf6 100644
--- a/kernel/spinlock.h
+++ b/kernel/spinlock.h
@@ -1,3 +1,6 @@
+#ifndef SPINLOCK_H
+#define SPINLOCK_H
+
 // Mutual exclusion lock.
 struct spinlock {
   uint locked;       // Is the lock held?
@@ -7,3 +10,5 @@ struct spinlock {
   struct cpu *cpu;   // The cpu holding the lock.
 };
 
+#endif // _SPINLOCK_H_
+
diff --git a/kernel/start.c b/kernel/start.c
index e16f18a..fc8d468 100644
--- a/kernel/start.c
+++ b/kernel/start.c
@@ -11,7 +11,8 @@ void timerinit();
 __attribute__ ((aligned (16))) char stack0[4096 * NCPU];
 
 // a scratch area per CPU for machine-mode timer interrupts.
-uint64 timer_scratch[NCPU][5];
+// one more added for quitting qemu.
+uint64 timer_scratch[NCPU][6];
 
 // assembly code in kernelvec.S for machine-mode timer interrupt.
 extern void timervec();
@@ -73,9 +74,11 @@ timerinit()
   // scratch[0..2] : space for timervec to save registers.
   // scratch[3] : address of CLINT MTIMECMP register.
   // scratch[4] : desired interval (in cycles) between timer interrupts.
+  // scratch[5] : stop flag to signal timervec to stop
   uint64 *scratch = &timer_scratch[id][0];
   scratch[3] = CLINT_MTIMECMP(id);
   scratch[4] = interval;
+  scratch[5] = 0;
   w_mscratch((uint64)scratch);
 
   // set the machine-mode trap handler.
@@ -87,3 +90,10 @@ timerinit()
   // enable machine-mode timer interrupts.
   w_mie(r_mie() | MIE_MTIE);
 }
+
+void
+timerstop()
+{
+  // set stop flag in scratch area for hartid[0].
+  timer_scratch[0][5] = 1;
+}
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..0c8dcad 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,31 +101,37 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_quit(void);
+extern uint64 sys_setseed(void);
+extern uint64 sys_randrange(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
 static uint64 (*syscalls[])(void) = {
-[SYS_fork]    sys_fork,
-[SYS_exit]    sys_exit,
-[SYS_wait]    sys_wait,
-[SYS_pipe]    sys_pipe,
-[SYS_read]    sys_read,
-[SYS_kill]    sys_kill,
-[SYS_exec]    sys_exec,
-[SYS_fstat]   sys_fstat,
-[SYS_chdir]   sys_chdir,
-[SYS_dup]     sys_dup,
-[SYS_getpid]  sys_getpid,
-[SYS_sbrk]    sys_sbrk,
-[SYS_sleep]   sys_sleep,
-[SYS_uptime]  sys_uptime,
-[SYS_open]    sys_open,
-[SYS_write]   sys_write,
-[SYS_mknod]   sys_mknod,
-[SYS_unlink]  sys_unlink,
-[SYS_link]    sys_link,
-[SYS_mkdir]   sys_mkdir,
-[SYS_close]   sys_close,
+[SYS_fork]      sys_fork,
+[SYS_exit]      sys_exit,
+[SYS_wait]      sys_wait,
+[SYS_pipe]      sys_pipe,
+[SYS_read]      sys_read,
+[SYS_kill]      sys_kill,
+[SYS_exec]      sys_exec,
+[SYS_fstat]     sys_fstat,
+[SYS_chdir]     sys_chdir,
+[SYS_dup]       sys_dup,
+[SYS_getpid]    sys_getpid,
+[SYS_sbrk]      sys_sbrk,
+[SYS_sleep]     sys_sleep,
+[SYS_uptime]    sys_uptime,
+[SYS_open]      sys_open,
+[SYS_write]     sys_write,
+[SYS_mknod]     sys_mknod,
+[SYS_unlink]    sys_unlink,
+[SYS_link]      sys_link,
+[SYS_mkdir]     sys_mkdir,
+[SYS_close]     sys_close,
+[SYS_quit]      sys_quit,
+[SYS_setseed]   sys_setseed,
+[SYS_randrange] sys_randrange,
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..a8cc5b5 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -1,22 +1,25 @@
 // System call numbers
-#define SYS_fork    1
-#define SYS_exit    2
-#define SYS_wait    3
-#define SYS_pipe    4
-#define SYS_read    5
-#define SYS_kill    6
-#define SYS_exec    7
-#define SYS_fstat   8
-#define SYS_chdir   9
-#define SYS_dup    10
-#define SYS_getpid 11
-#define SYS_sbrk   12
-#define SYS_sleep  13
-#define SYS_uptime 14
-#define SYS_open   15
-#define SYS_write  16
-#define SYS_mknod  17
-#define SYS_unlink 18
-#define SYS_link   19
-#define SYS_mkdir  20
-#define SYS_close  21
+#define SYS_fork       1
+#define SYS_exit       2
+#define SYS_wait       3
+#define SYS_pipe       4
+#define SYS_read       5
+#define SYS_kill       6
+#define SYS_exec       7
+#define SYS_fstat      8
+#define SYS_chdir      9
+#define SYS_dup       10
+#define SYS_getpid    11
+#define SYS_sbrk      12
+#define SYS_sleep     13
+#define SYS_uptime    14
+#define SYS_open      15
+#define SYS_write     16
+#define SYS_mknod     17
+#define SYS_unlink    18
+#define SYS_link      19
+#define SYS_mkdir     20
+#define SYS_close     21
+#define SYS_quit      22
+#define SYS_setseed   23
+#define SYS_randrange 24
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 3b4d5bd..90607f0 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -91,3 +91,27 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+uint64
+sys_quit(void)
+{
+  timerstop();
+  return 0;
+}
+
+uint64
+sys_setseed(void)
+{
+  int user_seed;
+  argint(0, &user_seed);
+  setseed(user_seed);
+  return 0;
+}
+
+uint64
+sys_randrange(void)
+{
+  int upper_limit;
+  argint(0, &upper_limit);
+  return randrange(upper_limit);
+}
diff --git a/user/clear.c b/user/clear.c
new file mode 100644
index 0000000..a2fd62a
--- /dev/null
+++ b/user/clear.c
@@ -0,0 +1,9 @@
+#include "kernel/types.h"
+#include "user/user.h"
+
+int 
+main() 
+{
+  printf("\033[2J\033[H");
+  exit(0);
+}
\ No newline at end of file
diff --git a/user/next.c b/user/next.c
new file mode 100644
index 0000000..9ac0b8b
--- /dev/null
+++ b/user/next.c
@@ -0,0 +1,19 @@
+#include "kernel/types.h"
+#include "user/user.h"
+
+int 
+main(int argc, char *argv[])
+{
+  if (argc != 2) {
+    fprintf(2, "Usage: next <upper limit>\n");
+    exit(1);
+  }
+  if (!is_valid_number(argv[1])) {
+    fprintf(2, "Error: Invalid upper limit '%s'.\n", argv[1]);
+    exit(1);
+  }
+  int upper_limit = atoi(argv[1]);
+  int random = randrange(upper_limit);
+  printf("Next random number is %d\n", random);
+  exit(0);
+}
\ No newline at end of file
diff --git a/user/quit.c b/user/quit.c
new file mode 100644
index 0000000..b6001db
--- /dev/null
+++ b/user/quit.c
@@ -0,0 +1,16 @@
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "user/user.h"
+
+int 
+main(int argc, char *argv[])
+{
+  if (argc > 1)
+  {
+      printf("Usage: quit\n");
+      exit(1);
+  }
+  quit();
+  printf("QEMU: Terminated\n");
+  exit(0);
+}
\ No newline at end of file
diff --git a/user/seed.c b/user/seed.c
new file mode 100644
index 0000000..73e2343
--- /dev/null
+++ b/user/seed.c
@@ -0,0 +1,19 @@
+#include "kernel/types.h"
+#include "user/user.h"
+
+int 
+main(int argc, char *argv[]) 
+{
+  if (argc != 2) {
+    fprintf(2, "Usage: seed <n>\n");
+    exit(1);
+  }
+  if (!is_valid_number(argv[1])) {
+    fprintf(2, "Error: Invalid seed '%s'.\n", argv[1]);
+    exit(1);
+  }
+  int seed = atoi(argv[1]);
+  setseed(seed);
+  printf("The seed has been set to %d.\n", seed);
+  exit(0);
+}
\ No newline at end of file
diff --git a/user/ulib.c b/user/ulib.c
index c7b66c4..1740893 100644
--- a/user/ulib.c
+++ b/user/ulib.c
@@ -145,3 +145,17 @@ memcpy(void *dst, const void *src, uint n)
 {
   return memmove(dst, src, n);
 }
+
+int 
+is_valid_number(const char *str)
+{
+  if (str == 0 || *str == '\0') {
+    return 0;
+  }
+  for (int i = 0; str[i] != '\0'; i++) {
+    if (str[i] < '0' || str[i] > '9') {
+        return 0;
+    }
+  }
+  return 1;
+}
diff --git a/user/user.h b/user/user.h
index 04013ca..bfb44b8 100644
--- a/user/user.h
+++ b/user/user.h
@@ -22,6 +22,9 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+void quit(void);
+void setseed(int);
+int randrange(int);
 
 // ulib.c
 int stat(const char*, struct stat*);
@@ -39,3 +42,4 @@ void free(void*);
 int atoi(const char*);
 int memcmp(const void *, const void *, uint);
 void *memcpy(void *, const void *, uint);
+int is_valid_number(const char*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..2de6a28 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,6 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("quit");
+entry("setseed");
+entry("randrange");
