diff --git a/Makefile b/Makefile
index 62fd0f8..b7ea48d 100644
--- a/Makefile
+++ b/Makefile
@@ -28,7 +28,8 @@ OBJS = \
   $K/sysfile.o \
   $K/kernelvec.o \
   $K/plic.o \
-  $K/virtio_disk.o
+  $K/virtio_disk.o \
+  $K/mlfq.o \
 
 # riscv64-unknown-elf- or riscv64-linux-gnu-
 # perhaps in /opt/riscv/bin
@@ -56,7 +57,7 @@ LD = $(TOOLPREFIX)ld
 OBJCOPY = $(TOOLPREFIX)objcopy
 OBJDUMP = $(TOOLPREFIX)objdump
 
-CFLAGS = -Wall -Werror -O -fno-omit-frame-pointer -ggdb -gdwarf-2
+CFLAGS = -Wall -Werror -Og -fno-omit-frame-pointer -ggdb -gdwarf-2 -g3
 CFLAGS += -MD
 CFLAGS += -mcmodel=medany
 # CFLAGS += -ffreestanding -fno-common -nostdlib -mno-relax
@@ -139,6 +140,13 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_clear\
+	$U/_quit\
+	$U/_seed\
+	$U/_next\
+	$U/_dummyproc\
+	$U/_testprocinfo\
+	$U/_togglelog\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
@@ -160,7 +168,7 @@ QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \
 	then echo "-gdb tcp::$(GDBPORT)"; \
 	else echo "-s -p $(GDBPORT)"; fi)
 ifndef CPUS
-CPUS := 3
+CPUS := 1
 endif
 
 QEMUOPTS = -machine virt -bios none -kernel $K/kernel -m 128M -smp $(CPUS) -nographic
diff --git a/kernel/defs.h b/kernel/defs.h
index d1b6bb9..ec4ed73 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -8,6 +8,12 @@ struct spinlock;
 struct sleeplock;
 struct stat;
 struct superblock;
+struct queue;
+struct mlfq;
+struct pstat;
+
+// start.c
+void            timerstop(void);
 
 // bio.c
 void            binit(void);
@@ -77,7 +83,7 @@ int             piperead(struct pipe*, uint64, int);
 int             pipewrite(struct pipe*, uint64, int);
 
 // printf.c
-int            printf(char*, ...) __attribute__ ((format (printf, 1, 2)));
+int             printf(char*, ...) __attribute__ ((format (printf, 1, 2)));
 void            panic(char*) __attribute__((noreturn));
 void            printfinit(void);
 
@@ -106,6 +112,11 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+void            setseed(int);
+int             randrange(int);
+int             settickets(int);
+int             getpinfo(struct pstat*);
+int             togglelog(void);
 
 // swtch.S
 void            swtch(struct context*, struct context*);
@@ -185,5 +196,15 @@ void            virtio_disk_init(void);
 void            virtio_disk_rw(struct buf *, int);
 void            virtio_disk_intr(void);
 
+// mlfq.c
+void            mlfqinit(void);
+void            enqueue(struct queue*, struct proc*);
+void            dequeue(struct queue*, struct proc*);
+struct proc*    round_robin(struct queue*);
+struct proc*    lottery(struct queue*);
+int             demote(struct mlfq*, struct proc*);
+void            remove_proc_from_mlfq(struct mlfq*, struct proc*);
+int             promote(struct mlfq*, struct proc*);
+
 // number of elements in fixed-size array
 #define NELEM(x) (sizeof(x)/sizeof((x)[0]))
diff --git a/kernel/kernelvec.S b/kernel/kernelvec.S
index a18ecbb..23501c4 100644
--- a/kernel/kernelvec.S
+++ b/kernel/kernelvec.S
@@ -73,12 +73,17 @@ timervec:
         # scratch[0,8,16] : register save area.
         # scratch[24] : address of CLINT's MTIMECMP register.
         # scratch[32] : desired interval between interrupts.
-        
+        # scratch[40] : stop flag set by timerstop.
+
         csrrw a0, mscratch, a0
         sd a1, 0(a0)
         sd a2, 8(a0)
         sd a3, 16(a0)
 
+        # stop if timerstop has set stop flag
+        ld a1, 40(a0)
+        bne a1, zero, halt
+
         # schedule the next timer interrupt
         # by adding interval to mtimecmp.
         ld a1, 24(a0) # CLINT_MTIMECMP(hart)
@@ -98,3 +103,13 @@ timervec:
         csrrw a0, mscratch, a0
 
         mret
+
+halt:
+        # qemu stops if FINISHER_PASS=0x5555
+        # is written at address *VIRT_TEST(=0x100000L)
+        lui a1, 0x100
+        lui a2, 0x5
+        addi a2, a2, 0x555
+        sw a2, 0(a1)
+spin:
+        j spin
diff --git a/kernel/log.h b/kernel/log.h
new file mode 100644
index 0000000..eeaf168
--- /dev/null
+++ b/kernel/log.h
@@ -0,0 +1,13 @@
+#ifndef _LOG_H_
+#define _LOG_H_
+
+// High intensity text
+#define HRED "\e[0;91m"
+#define HGRN "\e[0;92m"
+#define HYEL "\e[0;93m"
+#define HBLU "\e[0;94m"
+#define HMAG "\e[0;95m"
+
+#define COLOR_RESET "\e[0m"
+
+#endif // _LOG_H_
\ No newline at end of file
diff --git a/kernel/main.c b/kernel/main.c
index f0d3171..4b43f64 100644
--- a/kernel/main.c
+++ b/kernel/main.c
@@ -28,6 +28,7 @@ main()
     iinit();         // inode table
     fileinit();      // file table
     virtio_disk_init(); // emulated hard disk
+    mlfqinit();      // scheduler mlfq init
     userinit();      // first user process
     __sync_synchronize();
     started = 1;
@@ -40,6 +41,5 @@ main()
     trapinithart();   // install kernel trap vector
     plicinithart();   // ask PLIC for device interrupts
   }
-
   scheduler();        
 }
diff --git a/kernel/mlfq.c b/kernel/mlfq.c
new file mode 100644
index 0000000..7fa59a1
--- /dev/null
+++ b/kernel/mlfq.c
@@ -0,0 +1,152 @@
+//
+// Support functions for mlfq.
+//
+
+#include "types.h"
+#include "riscv.h"
+#include "defs.h"
+#include "param.h"
+#include "spinlock.h"
+#include "proc.h"
+#include "mlfq.h"
+
+struct mlfq mlfq;
+
+static void reinitialize_tickets(struct queue*);
+static int procidx(struct queue*, struct proc*);
+
+void 
+mlfqinit(void)
+{
+  initlock(&mlfq.lock, "mlfq");
+  mlfq.top_q.head = mlfq.top_q.tail = mlfq.bottom_q.head = mlfq.bottom_q.tail = 0;
+}
+
+void 
+enqueue(struct queue *q, struct proc *p) 
+{
+  if ((q->tail + 1) % NPROC == q->head)
+    panic("Queue overflow");
+  q->procs[q->tail] = p;
+  q->tail = (q->tail + 1) % NPROC;
+}
+
+void
+dequeue(struct queue *q, struct proc* p) 
+{
+  if (q->head == q->tail)
+    return;
+  int index = procidx(q, p);
+  if(index == -1)
+    return;
+  for (int i = index; i != q->tail; i = (i + 1) % NPROC) {
+    int next = (i + 1) % NPROC;
+    q->procs[i] = q->procs[next];
+  }
+  q->tail = (q->tail - 1 + NPROC) % NPROC;
+}
+
+struct proc* 
+round_robin(struct queue *q)
+{
+  for(int i = q->head; i < q->tail; i = (i + 1) % NPROC) {
+    struct proc *p = q->procs[i];
+    acquire(&p->lock);
+    if(p->state == RUNNABLE) {
+      release(&p->lock);
+      return p;
+    }
+    release(&p->lock);
+  }
+  return 0;
+}
+
+struct proc*
+lottery(struct queue *q)
+{
+  int total_tickets = 0;
+
+  for (int i = q->head; i != q->tail; i = (i + 1) % NPROC) {
+    struct proc *p = q->procs[i];
+    acquire(&p->lock);
+    if (p->state == RUNNABLE) {
+      total_tickets += p->current_tickets;
+    }
+    release(&p->lock);
+  }
+
+  if(!total_tickets) {
+    reinitialize_tickets(q);
+    return lottery(q);
+  }
+
+  int winning_ticket = randrange(total_tickets);
+  total_tickets = 0;
+
+  for (int i = q->head; i != q->tail; i = (i + 1) % NPROC) {
+    struct proc *p = q->procs[i];
+    acquire(&p->lock);
+    if (p->state == RUNNABLE) {
+      total_tickets += p->current_tickets;
+      if (total_tickets > winning_ticket) {
+        release(&p->lock);
+        return p;
+      }
+    }
+    release(&p->lock);
+  }
+  return 0;
+}
+
+static void 
+reinitialize_tickets(struct queue *q)
+{
+  for (int i = q->head; i != q->tail; i = (i + 1) % NPROC) {
+    struct proc *p = q->procs[i];
+    acquire(&p->lock);
+    if (p && p->state == RUNNABLE) {
+      p->current_tickets = p->initial_tickets;
+    }
+    release(&p->lock);
+  }
+}
+
+static int
+procidx(struct queue *q, struct proc *p)
+{
+  for (int idx = q->head; idx != q->tail; idx = (idx + 1) % NPROC) {
+    struct proc *itr = q->procs[idx];
+    acquire(&itr->lock);
+    if(p->pid == itr->pid) {
+      release(&itr->lock);
+      return idx;
+    }
+    release(&itr->lock);
+  }
+  return -1;
+}
+
+void
+remove_proc_from_mlfq(struct mlfq* mlfq, struct proc *p)
+{
+  if(p->level == TOP_Q) dequeue(&mlfq->top_q, p);
+  else dequeue(&mlfq->bottom_q, p);
+}
+
+int
+promote(struct mlfq* mlfq, struct proc* p)
+{
+  if(p->level == TOP_Q) return 0;
+  dequeue(&mlfq->bottom_q, p);
+  enqueue(&mlfq->top_q, p);
+  return 1;
+}
+
+int
+demote(struct mlfq* mlfq, struct proc* p)
+{
+  if(p->level == BOTTOM_Q) return 0;
+  dequeue(&mlfq->top_q, p);
+  enqueue(&mlfq->bottom_q, p);
+  return 1;
+}
\ No newline at end of file
diff --git a/kernel/mlfq.h b/kernel/mlfq.h
new file mode 100644
index 0000000..8b6e401
--- /dev/null
+++ b/kernel/mlfq.h
@@ -0,0 +1,22 @@
+#ifndef _MLFQ_H_
+#define _MLFQ_H_
+
+#include "types.h"
+#include "proc.h"
+#include "param.h"
+#include "spinlock.h"
+
+enum queuelevel { TOP_Q, BOTTOM_Q };
+
+struct queue {
+  struct proc *procs[NPROC];  // Array of process pointers
+  int head;                   // Index of the first process in the queue
+  int tail;                   // Index of the next free slot
+};
+
+struct mlfq {
+  struct queue top_q, bottom_q; // Two queues for MLFQ
+  struct spinlock lock;         // Lock to protect access to the MLFQ
+};
+
+#endif // _MLFQ_H_
diff --git a/kernel/param.h b/kernel/param.h
index 6624bff..23fd8ce 100644
--- a/kernel/param.h
+++ b/kernel/param.h
@@ -1,13 +1,17 @@
-#define NPROC        64  // maximum number of processes
-#define NCPU          8  // maximum number of CPUs
-#define NOFILE       16  // open files per process
-#define NFILE       100  // open files per system
-#define NINODE       50  // maximum number of active i-nodes
-#define NDEV         10  // maximum major device number
-#define ROOTDEV       1  // device number of file system root disk
-#define MAXARG       32  // max exec arguments
-#define MAXOPBLOCKS  10  // max # of blocks any FS op writes
-#define LOGSIZE      (MAXOPBLOCKS*3)  // max data blocks in on-disk log
-#define NBUF         (MAXOPBLOCKS*3)  // size of disk block cache
-#define FSSIZE       2000  // size of file system in blocks
-#define MAXPATH      128   // maximum file path name
+#define NPROC           64 // maximum number of processes
+#define NCPU             8 // maximum number of CPUs
+#define NOFILE          16 // open files per process
+#define NFILE          100 // open files per system
+#define NINODE          50 // maximum number of active i-nodes
+#define NDEV            10 // maximum major device number
+#define ROOTDEV          1 // device number of file system root disk
+#define MAXARG          32 // max exec arguments
+#define MAXOPBLOCKS     10 // max # of blocks any FS op writes
+#define LOGSIZE   (MAXOPBLOCKS*3) // max data blocks in on-disk log
+#define NBUF      (MAXOPBLOCKS*3) // size of disk block cache
+#define FSSIZE        2000 // size of file system in blocks
+#define MAXPATH        128 // maximum file path name
+#define TIME_LIMIT_0     2 // time limits for q0
+#define TIME_LIMIT_1     4 // time limits for q1
+#define WAIT_THRESH      6 // waiting threshold
+#define DEFAULT_TICKETS 10 // initial ticket count for lottery scheduling
diff --git a/kernel/proc.c b/kernel/proc.c
index 58a8a0b..a79c321 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -5,6 +5,10 @@
 #include "spinlock.h"
 #include "proc.h"
 #include "defs.h"
+#include "random.h"
+#include "mlfq.h"
+#include "pstat.h"
+#include "log.h"
 
 struct cpu cpus[NCPU];
 
@@ -26,6 +30,16 @@ extern char trampoline[]; // trampoline.S
 // must be acquired before any p->lock.
 struct spinlock wait_lock;
 
+// multilevel feedback queue for scheduling
+extern struct mlfq mlfq;
+
+// debug
+int LOG = 1;
+struct spinlock log_lock;
+
+int lottery_tickets = 0;
+struct spinlock lottery_lock;
+
 // Allocate a page for each process's kernel stack.
 // Map it high in memory, followed by an invalid
 // guard page.
@@ -51,6 +65,8 @@ procinit(void)
   
   initlock(&pid_lock, "nextpid");
   initlock(&wait_lock, "wait_lock");
+  initlock(&seed_lock, "seed_lock");
+  initlock(&log_lock, "log_lock");
   for(p = proc; p < &proc[NPROC]; p++) {
       initlock(&p->lock, "proc");
       p->state = UNUSED;
@@ -146,6 +162,15 @@ found:
   p->context.ra = (uint64)forkret;
   p->context.sp = p->kstack + PGSIZE;
 
+  p->initial_tickets = p->current_tickets = DEFAULT_TICKETS;
+  p->consumed_timer_ticks = p->times_scheduled = 0;
+  p->queue_ticks[TOP_Q] = p->queue_ticks[BOTTOM_Q] = 0;
+  p->level = TOP_Q;
+
+  acquire(&lottery_lock);
+  lottery_tickets += p->initial_tickets;
+  release(&lottery_lock);
+
   return p;
 }
 
@@ -169,6 +194,9 @@ freeproc(struct proc *p)
   p->killed = 0;
   p->xstate = 0;
   p->state = UNUSED;
+  p->current_tickets = p->initial_tickets = 0;
+  p->consumed_timer_ticks = p->times_scheduled = 0;
+  p->queue_ticks[TOP_Q] = p->queue_ticks[BOTTOM_Q] = 0;
 }
 
 // Create a user page table for a given process, with no user memory,
@@ -250,6 +278,7 @@ userinit(void)
   p->cwd = namei("/");
 
   p->state = RUNNABLE;
+  p->level = TOP_Q;
 
   release(&p->lock);
 }
@@ -454,22 +483,62 @@ scheduler(void)
     // processes are waiting.
     intr_on();
 
+    int winning_ticket = randrange(lottery_tickets);
+    int ticket_count = 0;
+    int p_in_q0 = 0;
+    
     for(p = proc; p < &proc[NPROC]; p++) {
       acquire(&p->lock);
       if(p->state == RUNNABLE) {
-        // Switch to chosen process.  It is the process's job
-        // to release its lock and then reacquire it
-        // before jumping back to us.
-        p->state = RUNNING;
-        c->proc = p;
-        swtch(&c->context, &p->context);
-
-        // Process is done running for now.
-        // It should have changed its p->state before coming back.
-        c->proc = 0;
+        p_in_q0 = 1;
+        ticket_count += p->current_tickets;
+        if(ticket_count >= winning_ticket) {
+          if(LOG) {
+            printf("%sLOTTERY: Process %d (%s) won in queue %d with %d tickets%s\n"
+            , HYEL, p->pid, p->name, p->level, p->current_tickets, COLOR_RESET);
+          }
+          // Switch to chosen process.  It is the process's job
+          // to release its lock and then reacquire it
+          // before jumping back to us.
+
+          int initial_ticks = p->consumed_timer_ticks;
+          while(p->consumed_timer_ticks - initial_ticks < TIME_LIMIT_0 && p->state == RUNNABLE) {
+            p->state = RUNNING;
+            c->proc = p;
+            swtch(&c->context, &p->context);
+            p->consumed_timer_ticks++;
+            p->queue_ticks[TOP_Q]++;
+            if(LOG) {
+              printf("\t%sProcess %d has spent %d ticks in queue %d%s\n",
+              HGRN, p->pid, p->consumed_timer_ticks - initial_ticks, p->level, COLOR_RESET);
+            }
+          }
+          p->current_tickets--;
+          acquire(&lottery_lock);
+          lottery_tickets--;
+          release(&lottery_lock);
+          // Process is done running for now.
+          // It should have changed its p->state before coming back.
+          c->proc = 0;
+          release(&p->lock);
+          break;
+        }
       }
       release(&p->lock);
     }
+
+    if(p_in_q0 && !ticket_count) {
+      for(p = proc; p < &proc[NPROC]; p++) {
+        acquire(&p->lock);
+        if(p->state == RUNNABLE) {
+          p->current_tickets = p->initial_tickets;
+          acquire(&lottery_lock);
+          lottery_tickets += p->current_tickets;
+          release(&lottery_lock);
+        }
+        release(&p->lock);
+      }
+    }
   }
 }
 
@@ -686,3 +755,68 @@ procdump(void)
     printf("\n");
   }
 }
+
+void
+setseed(int userseed)
+{
+  acquire(&seed_lock);
+  seed = userseed;
+  release(&seed_lock);
+}
+
+int
+randrange(int upper_limit)
+{
+  int random;
+  acquire(&seed_lock);
+  seed = (A * seed + C) % M;
+  random = seed % upper_limit + 1;
+  release(&seed_lock);
+  return random;
+}
+
+int
+settickets(int tickets)
+{
+  if(tickets < 1) return -1;
+  struct proc *p = myproc();
+  acquire(&p->lock);
+  p->initial_tickets = p->current_tickets = tickets;
+  release(&p->lock);
+  return 0;
+}
+
+int
+getpinfo(struct pstat* user_pstat)
+{
+  struct pstat *kernel_pstat;
+  struct proc* p;
+  int i = 0;
+  for(p = proc; p < &proc[NPROC]; p++) {
+    acquire(&p->lock);
+    kernel_pstat->pid[i] = p->pid;
+    kernel_pstat->inuse[i] = (p->state == RUNNABLE || p->state == RUNNING);
+    kernel_pstat->inQ[i] = p->level;
+    kernel_pstat->waiting_time[i] = 0;
+    kernel_pstat->running_time[i] = 0;
+    kernel_pstat->times_scheduled[i] = p->times_scheduled;
+    kernel_pstat->tickets_original[i] = p->initial_tickets;
+    kernel_pstat->tickets_current[i] = p->current_tickets;
+    kernel_pstat->queue_ticks[i][TOP_Q] = p->queue_ticks[TOP_Q];
+    kernel_pstat->queue_ticks[i][BOTTOM_Q] = p->queue_ticks[BOTTOM_Q];
+    release(&p->lock);
+    i++;
+  }
+  if (copyout(myproc()->pagetable, (uint64)user_pstat, (char *)&kernel_pstat, sizeof(kernel_pstat)) < 0)
+    return -1;
+  return 0;
+}
+
+int
+togglelog(void)
+{
+  acquire(&log_lock);
+  LOG ^= 1;
+  release(&log_lock);
+  return LOG;
+}
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..2ef2c2a 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -1,3 +1,8 @@
+#ifndef _PROC_H_
+#define _PROC_H_
+
+#include "mlfq.h"
+
 // Saved registers for kernel context switches.
 struct context {
   uint64 ra;
@@ -91,6 +96,12 @@ struct proc {
   int killed;                  // If non-zero, have been killed
   int xstate;                  // Exit status to be returned to parent's wait
   int pid;                     // Process ID
+  int initial_tickets;         // Original number of tickets given by scheduler
+  int current_tickets;         // Current number of tickets remaining
+  int consumed_timer_ticks;    // Number of tickets consumed
+  enum queuelevel level;       // Current queue level
+  int times_scheduled;         // Total number of times the process was scheduled
+  uint queue_ticks[2];         // Total number of ticks the process has spent in each queue
 
   // wait_lock must be held when using this:
   struct proc *parent;         // Parent process
@@ -105,3 +116,5 @@ struct proc {
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
 };
+
+#endif // _PROC_H_
diff --git a/kernel/pstat.h b/kernel/pstat.h
new file mode 100644
index 0000000..d9ea295
--- /dev/null
+++ b/kernel/pstat.h
@@ -0,0 +1,17 @@
+#ifndef _PSTAT_H_
+#define _PSTAT_H_
+#include "param.h"
+
+struct pstat {
+  int pid[NPROC];              // the process ID of each process 
+  int inuse[NPROC];            // whether this slot of the process table is being used (1 or 0)
+  int inQ[NPROC];              // which queue the process is currently in
+  int waiting_time[NPROC];     // the time each process has spent waiting before being scheduled
+  int running_time[NPROC];     // Number of times the process was scheduled before its time slice was used
+  int times_scheduled[NPROC];  // the total number of times this process was scheduled
+  int tickets_original[NPROC]; // the number of tickets each process originally had
+  int tickets_current[NPROC];  // the number of tickets each process currently has
+  int queue_ticks[NPROC][2];  // the total number of ticks each process has spent in each queue
+};
+
+#endif // _PSTAT_H_
diff --git a/kernel/random.h b/kernel/random.h
new file mode 100644
index 0000000..523580d
--- /dev/null
+++ b/kernel/random.h
@@ -0,0 +1,13 @@
+#ifndef _RANDOM_H_
+#define _RANDOM_H_
+
+#define A 14359
+#define C 9654
+#define M 21569
+
+#include "spinlock.h"
+
+int seed = 1337;
+struct spinlock seed_lock;
+
+#endif // _RANDOM_H_
diff --git a/kernel/spinlock.h b/kernel/spinlock.h
index 4392820..c14b802 100644
--- a/kernel/spinlock.h
+++ b/kernel/spinlock.h
@@ -1,3 +1,6 @@
+#ifndef _SPINLOCK_H_
+#define _SPINLOCK_H_
+
 // Mutual exclusion lock.
 struct spinlock {
   uint locked;       // Is the lock held?
@@ -7,3 +10,5 @@ struct spinlock {
   struct cpu *cpu;   // The cpu holding the lock.
 };
 
+#endif // _SPINLOCK_H_
+
diff --git a/kernel/start.c b/kernel/start.c
index e16f18a..fc8d468 100644
--- a/kernel/start.c
+++ b/kernel/start.c
@@ -11,7 +11,8 @@ void timerinit();
 __attribute__ ((aligned (16))) char stack0[4096 * NCPU];
 
 // a scratch area per CPU for machine-mode timer interrupts.
-uint64 timer_scratch[NCPU][5];
+// one more added for quitting qemu.
+uint64 timer_scratch[NCPU][6];
 
 // assembly code in kernelvec.S for machine-mode timer interrupt.
 extern void timervec();
@@ -73,9 +74,11 @@ timerinit()
   // scratch[0..2] : space for timervec to save registers.
   // scratch[3] : address of CLINT MTIMECMP register.
   // scratch[4] : desired interval (in cycles) between timer interrupts.
+  // scratch[5] : stop flag to signal timervec to stop
   uint64 *scratch = &timer_scratch[id][0];
   scratch[3] = CLINT_MTIMECMP(id);
   scratch[4] = interval;
+  scratch[5] = 0;
   w_mscratch((uint64)scratch);
 
   // set the machine-mode trap handler.
@@ -87,3 +90,10 @@ timerinit()
   // enable machine-mode timer interrupts.
   w_mie(r_mie() | MIE_MTIE);
 }
+
+void
+timerstop()
+{
+  // set stop flag in scratch area for hartid[0].
+  timer_scratch[0][5] = 1;
+}
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..800a697 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,31 +101,43 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_quit(void);
+extern uint64 sys_setseed(void);
+extern uint64 sys_randrange(void);
+extern uint64 sys_settickets(void);
+extern uint64 sys_getpinfo(void);
+extern uint64 sys_togglelog(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
 static uint64 (*syscalls[])(void) = {
-[SYS_fork]    sys_fork,
-[SYS_exit]    sys_exit,
-[SYS_wait]    sys_wait,
-[SYS_pipe]    sys_pipe,
-[SYS_read]    sys_read,
-[SYS_kill]    sys_kill,
-[SYS_exec]    sys_exec,
-[SYS_fstat]   sys_fstat,
-[SYS_chdir]   sys_chdir,
-[SYS_dup]     sys_dup,
-[SYS_getpid]  sys_getpid,
-[SYS_sbrk]    sys_sbrk,
-[SYS_sleep]   sys_sleep,
-[SYS_uptime]  sys_uptime,
-[SYS_open]    sys_open,
-[SYS_write]   sys_write,
-[SYS_mknod]   sys_mknod,
-[SYS_unlink]  sys_unlink,
-[SYS_link]    sys_link,
-[SYS_mkdir]   sys_mkdir,
-[SYS_close]   sys_close,
+[SYS_fork]       sys_fork,
+[SYS_exit]       sys_exit,
+[SYS_wait]       sys_wait,
+[SYS_pipe]       sys_pipe,
+[SYS_read]       sys_read,
+[SYS_kill]       sys_kill,
+[SYS_exec]       sys_exec,
+[SYS_fstat]      sys_fstat,
+[SYS_chdir]      sys_chdir,
+[SYS_dup]        sys_dup,
+[SYS_getpid]     sys_getpid,
+[SYS_sbrk]       sys_sbrk,
+[SYS_sleep]      sys_sleep,
+[SYS_uptime]     sys_uptime,
+[SYS_open]       sys_open,
+[SYS_write]      sys_write,
+[SYS_mknod]      sys_mknod,
+[SYS_unlink]     sys_unlink,
+[SYS_link]       sys_link,
+[SYS_mkdir]      sys_mkdir,
+[SYS_close]      sys_close,
+[SYS_quit]       sys_quit,
+[SYS_setseed]    sys_setseed,
+[SYS_randrange]  sys_randrange,
+[SYS_settickets] sys_settickets,
+[SYS_getpinfo]   sys_getpinfo,
+[SYS_togglelog]  sys_togglelog,
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..848a3ba 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -1,22 +1,28 @@
 // System call numbers
-#define SYS_fork    1
-#define SYS_exit    2
-#define SYS_wait    3
-#define SYS_pipe    4
-#define SYS_read    5
-#define SYS_kill    6
-#define SYS_exec    7
-#define SYS_fstat   8
-#define SYS_chdir   9
-#define SYS_dup    10
-#define SYS_getpid 11
-#define SYS_sbrk   12
-#define SYS_sleep  13
-#define SYS_uptime 14
-#define SYS_open   15
-#define SYS_write  16
-#define SYS_mknod  17
-#define SYS_unlink 18
-#define SYS_link   19
-#define SYS_mkdir  20
-#define SYS_close  21
+#define SYS_fork        1
+#define SYS_exit        2
+#define SYS_wait        3
+#define SYS_pipe        4
+#define SYS_read        5
+#define SYS_kill        6
+#define SYS_exec        7
+#define SYS_fstat       8
+#define SYS_chdir       9
+#define SYS_dup        10
+#define SYS_getpid     11
+#define SYS_sbrk       12
+#define SYS_sleep      13
+#define SYS_uptime     14
+#define SYS_open       15
+#define SYS_write      16
+#define SYS_mknod      17
+#define SYS_unlink     18
+#define SYS_link       19
+#define SYS_mkdir      20
+#define SYS_close      21
+#define SYS_quit       22
+#define SYS_setseed    23
+#define SYS_randrange  24
+#define SYS_settickets 25
+#define SYS_getpinfo   26
+#define SYS_togglelog  27
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 3b4d5bd..822cc7a 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -91,3 +91,49 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+uint64
+sys_quit(void)
+{
+  timerstop();
+  return 0;
+}
+
+uint64
+sys_setseed(void)
+{
+  int user_seed;
+  argint(0, &user_seed);
+  setseed(user_seed);
+  return 0;
+}
+
+uint64
+sys_randrange(void)
+{
+  int upper_limit;
+  argint(0, &upper_limit);
+  return randrange(upper_limit);
+}
+
+uint64
+sys_settickets(void)
+{
+  int tickets;
+  argint(0, &tickets);
+  return settickets(tickets);
+}
+
+uint64
+sys_getpinfo(void)
+{
+  struct pstat *user_pstat;
+  argaddr(0, (uint64*)&user_pstat);
+  return getpinfo(user_pstat);
+}
+
+uint64
+sys_togglelog(void)
+{
+  return togglelog();
+}
diff --git a/user/clear.c b/user/clear.c
new file mode 100644
index 0000000..a2fd62a
--- /dev/null
+++ b/user/clear.c
@@ -0,0 +1,9 @@
+#include "kernel/types.h"
+#include "user/user.h"
+
+int 
+main() 
+{
+  printf("\033[2J\033[H");
+  exit(0);
+}
\ No newline at end of file
diff --git a/user/dummyproc.c b/user/dummyproc.c
new file mode 100644
index 0000000..180e5ca
--- /dev/null
+++ b/user/dummyproc.c
@@ -0,0 +1,57 @@
+#include "kernel/types.h"
+#include "user/user.h"
+
+static void run(int, uint32);
+
+int
+main(int argc, char *argv[])
+{
+  if(argc != 3) {
+    printf("Usage: dummyproc <# of tickets> <# of iterations in loop>.\n");
+    exit(1);
+  }
+
+  if(!is_valid_number(argv[1])) {
+    printf("Invalid number of tickets: \'%s\'\n", argv[1]);
+    exit(1);
+  }
+
+  if(!is_valid_uint32(argv[2])) {
+    printf("Invalid number of iterations: \'%s\'\n", argv[2]);
+    exit(1);
+  }
+
+  int tickets = atoi(argv[1]);
+  uint32 iterations = atoui(argv[2]);
+
+  if(settickets(tickets) < 0)
+    exit(1);
+  
+  run(tickets, iterations);
+
+  exit(0);
+}
+
+static void
+run(int tickets, uint32 iterations) 
+{
+  int pid = fork();
+
+  if(pid < 0)
+    printf("Fork failed: %d\n", pid);
+  if(pid > 0) {
+    printf("PARENT: Called with %d tickets, %d iters. Parent will exit now.\n", tickets, iterations);
+    for(uint32 i = 0; i < iterations; i++);
+    printf("PARENT: Parent with pid %d exited with status 0\n", getpid());
+  }
+  else {
+    printf("CHILD: process %d with %d tickets started for %d loops\n", getpid(), tickets, iterations);
+    uint32 interval = iterations / tickets;
+    for(uint32 i = 0; i < iterations; i++) {
+      if(!(i % interval)) {
+        printf("Inside Child: PID %d with %d tickets ran for %d loops\n", getpid(), tickets, i);
+      }
+    }
+    printf("CHILD: process %d with %d tickets ran for %d loops\n", getpid(), tickets, iterations);
+  }
+}
\ No newline at end of file
diff --git a/user/next.c b/user/next.c
new file mode 100644
index 0000000..9ac0b8b
--- /dev/null
+++ b/user/next.c
@@ -0,0 +1,19 @@
+#include "kernel/types.h"
+#include "user/user.h"
+
+int 
+main(int argc, char *argv[])
+{
+  if (argc != 2) {
+    fprintf(2, "Usage: next <upper limit>\n");
+    exit(1);
+  }
+  if (!is_valid_number(argv[1])) {
+    fprintf(2, "Error: Invalid upper limit '%s'.\n", argv[1]);
+    exit(1);
+  }
+  int upper_limit = atoi(argv[1]);
+  int random = randrange(upper_limit);
+  printf("Next random number is %d\n", random);
+  exit(0);
+}
\ No newline at end of file
diff --git a/user/quit.c b/user/quit.c
new file mode 100644
index 0000000..b6001db
--- /dev/null
+++ b/user/quit.c
@@ -0,0 +1,16 @@
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "user/user.h"
+
+int 
+main(int argc, char *argv[])
+{
+  if (argc > 1)
+  {
+      printf("Usage: quit\n");
+      exit(1);
+  }
+  quit();
+  printf("QEMU: Terminated\n");
+  exit(0);
+}
\ No newline at end of file
diff --git a/user/seed.c b/user/seed.c
new file mode 100644
index 0000000..73e2343
--- /dev/null
+++ b/user/seed.c
@@ -0,0 +1,19 @@
+#include "kernel/types.h"
+#include "user/user.h"
+
+int 
+main(int argc, char *argv[]) 
+{
+  if (argc != 2) {
+    fprintf(2, "Usage: seed <n>\n");
+    exit(1);
+  }
+  if (!is_valid_number(argv[1])) {
+    fprintf(2, "Error: Invalid seed '%s'.\n", argv[1]);
+    exit(1);
+  }
+  int seed = atoi(argv[1]);
+  setseed(seed);
+  printf("The seed has been set to %d.\n", seed);
+  exit(0);
+}
\ No newline at end of file
diff --git a/user/testprocinfo.c b/user/testprocinfo.c
new file mode 100644
index 0000000..ad5b70b
--- /dev/null
+++ b/user/testprocinfo.c
@@ -0,0 +1,26 @@
+#include "kernel/types.h"
+#include "kernel/pstat.h"
+#include "user/user.h"
+
+int
+main(int argc, char *argv[])
+{
+  if(argc != 1){
+    printf("Usage: testprocinfo.\n");
+    exit(1);
+  }
+
+  struct pstat *user_pstat = (struct pstat*)malloc(sizeof(struct pstat));
+
+  if(getpinfo(user_pstat) < 0){
+    printf("Failed to get proc info.\n");
+    exit(1);
+  } else {
+    
+  }
+
+
+
+  
+
+}
\ No newline at end of file
diff --git a/user/togglelog.c b/user/togglelog.c
new file mode 100644
index 0000000..0e858b8
--- /dev/null
+++ b/user/togglelog.c
@@ -0,0 +1,12 @@
+#include "kernel/types.h"
+#include "user/user.h"
+
+int
+main(int argc, char *argv[])
+{
+  if(!togglelog())
+    printf("Logging disabled\n");
+  else 
+    printf("Logging enabled\n");
+  exit(0);
+}
diff --git a/user/ulib.c b/user/ulib.c
index c7b66c4..26f2eda 100644
--- a/user/ulib.c
+++ b/user/ulib.c
@@ -95,15 +95,20 @@ stat(const char *n, struct stat *st)
   return r;
 }
 
-int
-atoi(const char *s)
+int atoi(const char *s)
 {
-  int n;
-
-  n = 0;
-  while('0' <= *s && *s <= '9')
-    n = n*10 + *s++ - '0';
-  return n;
+  int n = 0;
+  int sign = 1;
+  if (*s == '-') {
+    sign = -1;
+    s++;
+  } else if (*s == '+')
+    s++;
+  while ('0' <= *s && *s <= '9') {
+    n = n * 10 + (*s - '0');
+    s++;
+  }
+  return sign * n;
 }
 
 void*
@@ -145,3 +150,58 @@ memcpy(void *dst, const void *src, uint n)
 {
   return memmove(dst, src, n);
 }
+
+int is_valid_number(const char *str)
+{
+  if (str == 0 || *str == '\0')
+    return 0;
+
+  int start = 0;
+  if (str[0] == '-') {
+    start = 1;
+    if (str[1] == '\0')
+      return 0;
+  }
+
+  for (int i = start; str[i] != '\0'; i++) {
+    if (str[i] < '0' || str[i] > '9') 
+      return 0;
+  }
+
+  return 1;
+}
+
+uint32 atoui(const char *s)
+{
+  uint32 n = 0;
+
+  while ('0' <= *s && *s <= '9') {
+    n = n * 10 + (*s - '0');
+    s++;
+  }
+
+  return n;
+}
+
+int 
+is_valid_uint32(const char *str) 
+{
+  if (str == 0 || *str == '\0') 
+    return 0;
+
+  const char *UINT32_MAX_STR = "4294967295";
+  int length = strlen(str);
+
+  if (length > 10)
+    return 0;
+  
+  for (int i = 0; i < length; i++) {
+    if (str[i] < '0' || str[i] > '9')
+      return 0;
+  }
+
+  if (length < 10)
+    return 1;
+
+  return strcmp(str, UINT32_MAX_STR) <= 0;
+}
diff --git a/user/user.h b/user/user.h
index 04013ca..6aff27f 100644
--- a/user/user.h
+++ b/user/user.h
@@ -1,4 +1,5 @@
 struct stat;
+struct pstat;
 
 // system calls
 int fork(void);
@@ -22,6 +23,12 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+void quit(void);
+void setseed(int);
+int randrange(int);
+int settickets(int);
+int getpinfo(struct pstat*);
+int togglelog(void);
 
 // ulib.c
 int stat(const char*, struct stat*);
@@ -39,3 +46,6 @@ void free(void*);
 int atoi(const char*);
 int memcmp(const void *, const void *, uint);
 void *memcpy(void *, const void *, uint);
+int is_valid_number(const char*);
+uint atoui(const char*);
+int is_valid_uint32(const char*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..72b81e7 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,9 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("quit");
+entry("setseed");
+entry("randrange");
+entry("settickets");
+entry("getpinfo");
+entry("togglelog");
