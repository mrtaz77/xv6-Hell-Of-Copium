diff --git a/Makefile b/Makefile
index 62fd0f8..8a71648 100644
--- a/Makefile
+++ b/Makefile
@@ -56,7 +56,7 @@ LD = $(TOOLPREFIX)ld
 OBJCOPY = $(TOOLPREFIX)objcopy
 OBJDUMP = $(TOOLPREFIX)objdump
 
-CFLAGS = -Wall -Werror -O -fno-omit-frame-pointer -ggdb -gdwarf-2
+CFLAGS = -Wall -Werror -Og -fno-omit-frame-pointer -ggdb -gdwarf-2 -g3
 CFLAGS += -MD
 CFLAGS += -mcmodel=medany
 # CFLAGS += -ffreestanding -fno-common -nostdlib -mno-relax
@@ -139,6 +139,8 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_clear\
+	$U/_quit\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
@@ -160,7 +162,7 @@ QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \
 	then echo "-gdb tcp::$(GDBPORT)"; \
 	else echo "-s -p $(GDBPORT)"; fi)
 ifndef CPUS
-CPUS := 3
+CPUS := 1
 endif
 
 QEMUOPTS = -machine virt -bios none -kernel $K/kernel -m 128M -smp $(CPUS) -nographic
diff --git a/kernel/defs.h b/kernel/defs.h
index d1b6bb9..840aa40 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -9,6 +9,9 @@ struct sleeplock;
 struct stat;
 struct superblock;
 
+// start.c
+void            timerstop(void);
+
 // bio.c
 void            binit(void);
 struct buf*     bread(uint, uint);
diff --git a/kernel/kernelvec.S b/kernel/kernelvec.S
index a18ecbb..23501c4 100644
--- a/kernel/kernelvec.S
+++ b/kernel/kernelvec.S
@@ -73,12 +73,17 @@ timervec:
         # scratch[0,8,16] : register save area.
         # scratch[24] : address of CLINT's MTIMECMP register.
         # scratch[32] : desired interval between interrupts.
-        
+        # scratch[40] : stop flag set by timerstop.
+
         csrrw a0, mscratch, a0
         sd a1, 0(a0)
         sd a2, 8(a0)
         sd a3, 16(a0)
 
+        # stop if timerstop has set stop flag
+        ld a1, 40(a0)
+        bne a1, zero, halt
+
         # schedule the next timer interrupt
         # by adding interval to mtimecmp.
         ld a1, 24(a0) # CLINT_MTIMECMP(hart)
@@ -98,3 +103,13 @@ timervec:
         csrrw a0, mscratch, a0
 
         mret
+
+halt:
+        # qemu stops if FINISHER_PASS=0x5555
+        # is written at address *VIRT_TEST(=0x100000L)
+        lui a1, 0x100
+        lui a2, 0x5
+        addi a2, a2, 0x555
+        sw a2, 0(a1)
+spin:
+        j spin
diff --git a/kernel/pstat.h b/kernel/pstat.h
new file mode 100644
index 0000000..30f535a
--- /dev/null
+++ b/kernel/pstat.h
@@ -0,0 +1,18 @@
+#ifndef _PSTAT_H_
+#define _PSTAT_H_
+#include "param.h"
+#include "types.h"
+
+struct pstat {
+  int pid[NPROC];              // the process ID of each process 
+  int inuse[NPROC];            // whether this slot of the process table is being used (1 or 0)
+  int inQ[NPROC];              // which queue the process is currently in
+  int waiting_time[NPROC];     // the time each process has spent waiting before being scheduled
+  int running_time[NPROC];     // Number of times the process was scheduled before its time slice was used
+  int times_scheduled[NPROC];  // the total number of times this process was scheduled
+  int tickets_original[NPROC]; // the number of tickets each process originally had
+  int tickets_current[NPROC];  // the number of tickets each process currently has
+  uint queue_ticks[NPROC][2];  // the total number of ticks each process has spent in each queue
+};
+
+#endif // _PSTAT_H_
diff --git a/kernel/start.c b/kernel/start.c
index e16f18a..fc8d468 100644
--- a/kernel/start.c
+++ b/kernel/start.c
@@ -11,7 +11,8 @@ void timerinit();
 __attribute__ ((aligned (16))) char stack0[4096 * NCPU];
 
 // a scratch area per CPU for machine-mode timer interrupts.
-uint64 timer_scratch[NCPU][5];
+// one more added for quitting qemu.
+uint64 timer_scratch[NCPU][6];
 
 // assembly code in kernelvec.S for machine-mode timer interrupt.
 extern void timervec();
@@ -73,9 +74,11 @@ timerinit()
   // scratch[0..2] : space for timervec to save registers.
   // scratch[3] : address of CLINT MTIMECMP register.
   // scratch[4] : desired interval (in cycles) between timer interrupts.
+  // scratch[5] : stop flag to signal timervec to stop
   uint64 *scratch = &timer_scratch[id][0];
   scratch[3] = CLINT_MTIMECMP(id);
   scratch[4] = interval;
+  scratch[5] = 0;
   w_mscratch((uint64)scratch);
 
   // set the machine-mode trap handler.
@@ -87,3 +90,10 @@ timerinit()
   // enable machine-mode timer interrupts.
   w_mie(r_mie() | MIE_MTIE);
 }
+
+void
+timerstop()
+{
+  // set stop flag in scratch area for hartid[0].
+  timer_scratch[0][5] = 1;
+}
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..ef36c57 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,7 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_quit(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +127,7 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_quit]    sys_quit,
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..3a6d9b0 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,4 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_quit   22
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 3b4d5bd..3185308 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -91,3 +91,10 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+uint64
+sys_quit(void)
+{
+  timerstop();
+  return 0;
+}
diff --git a/user/clear.c b/user/clear.c
new file mode 100644
index 0000000..a2fd62a
--- /dev/null
+++ b/user/clear.c
@@ -0,0 +1,9 @@
+#include "kernel/types.h"
+#include "user/user.h"
+
+int 
+main() 
+{
+  printf("\033[2J\033[H");
+  exit(0);
+}
\ No newline at end of file
diff --git a/user/quit.c b/user/quit.c
new file mode 100644
index 0000000..b6001db
--- /dev/null
+++ b/user/quit.c
@@ -0,0 +1,16 @@
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "user/user.h"
+
+int 
+main(int argc, char *argv[])
+{
+  if (argc > 1)
+  {
+      printf("Usage: quit\n");
+      exit(1);
+  }
+  quit();
+  printf("QEMU: Terminated\n");
+  exit(0);
+}
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index 04013ca..1a9e07b 100644
--- a/user/user.h
+++ b/user/user.h
@@ -22,6 +22,7 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+void quit(void);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..26a4087 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,4 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("quit");
